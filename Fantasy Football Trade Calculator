{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Build the Trade Calculator\n",
        "\n",
        "\n",
        "\n",
        "1.    Owner supplies custom rankings, or use organic rankings from historical data\n",
        "  - custom rankings must be formatted to have a Name, Position, Rank (within position, not league wide)\n",
        "2.   Take two inputs of player names\n",
        "3.   Take inputs for league settings\n",
        "4.   Match players with their corresponding rank\n",
        "5.   Use league settings and predertimined functions (above) to find replacement value for each position involved in the trade\n",
        "6.   Use predertimined function and rankings to find value of each player in the trade\n",
        "7.   Subtract replacement value from each player to find PAR\n",
        "8.   Raise each individual PAR to desired exponent\n",
        "9.   Sum each side\n",
        "10.  Report Results\n",
        "\n",
        "Positional scarcity is already taken care of by our replacement threshold. RBs have a lower threshold and are more rare, therefore an RB with 12ppg will be worth more PAR than a WR with 12ppg, which is good.\n",
        "\n",
        "For now, I will build the trade calculator assuming the following league settings:\n",
        "-  12 teams\n",
        "-  PPR scoring\n",
        "-  1qb, 2rb, 2wr, 1te, 2flex\n",
        "\n",
        "Other scoring formats and league sizes can be considered after.\n"
      ],
      "metadata": {
        "id": "vjL_H08-qMZH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Function for finding equation and replacement value from input dataframe of position filtered data"
      ],
      "metadata": {
        "id": "YF9rPNleqSA_"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-K1Uw_SnqEQC"
      },
      "outputs": [],
      "source": [
        "def find_equation(position_data, position_string, player, rank):\n",
        "  def reciprocal_function(x,a,b,c,d):\n",
        "    return a/(b*x + c) +d\n",
        "\n",
        "  replacement_threshold = 0\n",
        "\n",
        "  #change replacement threshold for position\n",
        "  if position_string == 'WR':\n",
        "        replacement_threshold = 42\n",
        "        color = 'lime'\n",
        "  elif position_string == 'RB':\n",
        "        replacement_threshold = 30\n",
        "        color = 'c'\n",
        "  elif position_string == 'TE':\n",
        "        replacement_threshold = 18\n",
        "        color = 'r'\n",
        "  elif position_string == 'QB':\n",
        "        replacement_threshold = 18\n",
        "        color = 'm'\n",
        "  else:\n",
        "        print(\"Error: Input position must be 'WR', 'RB', 'TE', or 'QB'\")\n",
        "        return\n",
        "\n",
        "  #limit data to players with at least 5 gamesfind average replacement, based on league settings described above\n",
        "  position_data = position_data[position_data['G'] >= 5]\n",
        "  position_data = position_data.sort_values(by='FPTS/G', ascending=False).reset_index(drop=True)\n",
        "  position_data['Rank'] = position_data.index\n",
        "  position_data = position_data[position_data['Rank'] <= replacement_threshold] #1.5 per team, 12 teams\n",
        "  position_waiver = position_data[(position_data['Rank'] == replacement_threshold)]\n",
        "  position_replacement = position_waiver['FPTS/G'].mean()\n",
        "  position_replacement\n",
        "\n",
        "  #identify x and y\n",
        "  x = position_data['Rank']\n",
        "  y = position_data['FPTS/G']\n",
        "\n",
        "  #fit the curve and get parameters\n",
        "  params, covariance = curve_fit(reciprocal_function, x, y)\n",
        "  a,b,c,d = params\n",
        "\n",
        "  #plot\n",
        "  fitted_func = f'y = {a:.2f} / ({b:.4f}x + {c:.2f}) + {d:.2f}'\n",
        "  print(fitted_func)\n",
        "\n",
        "  y_fit = reciprocal_function(x, a, b, c,d)\n",
        "\n",
        "\n",
        "  plt.plot(x, y_fit, label = 'fit', color = 'red')\n",
        "  plt.axhline(y=position_replacement, color='green', linestyle='--', label='Average Replacement')\n",
        "\n",
        "  y_at_rank = reciprocal_function(rank, a, b, c, d)\n",
        "\n",
        "  # Plot point for player prediction\n",
        "\n",
        "  plt.scatter(rank, y_at_rank, s=100,color=color, marker='o', label= f'Player {player} at rank {rank}')\n",
        "\n",
        "  plt.ylim(0, 30)\n",
        "  plt.legend()\n",
        "  plt.show()\n",
        "\n",
        "  return params, position_replacement\n",
        "\n",
        "  '''\n",
        "  example usage:\n",
        "  eq_params, pos_replacement = find_equation(position_data, \"position\")\n",
        "\n",
        "  '''\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Function for par of player\n",
        "\n",
        "take name params,  as input"
      ],
      "metadata": {
        "id": "AxknlwskqZDN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def calc_par(player, rankings, params, replacement):\n",
        "  player_row = rankings[rankings['Name'] == player]\n",
        "\n",
        "  if not player_row.empty:\n",
        "        rank = player_row['Rank'].values[0]\n",
        "        pos = player_row['Position'].values[0]\n",
        "\n",
        "        a, b, c, d = params\n",
        "        raw_pts = a / ((b * rank) + c) + d\n",
        "\n",
        "        #correct for below replacement\n",
        "        if raw_pts < replacement:\n",
        "          raw_pts = replacement\n",
        "\n",
        "        par = (raw_pts - replacement) ** 1.1\n",
        "\n",
        "        return par\n",
        "  else:\n",
        "      print(f\"Player {player} not found in rankings.\")\n",
        "      return None\n",
        "\n"
      ],
      "metadata": {
        "id": "usRXp7C9qe8-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Function for calculating trades\n",
        "\n",
        "Take input of two lists of player names and rankings data"
      ],
      "metadata": {
        "id": "tKryLuFQqjzA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def trade_calculate(side1, side2, rankings):\n",
        "\n",
        "  import pandas as pd\n",
        "  import numpy as np\n",
        "  from scipy.optimize import curve_fit\n",
        "  import matplotlib.pyplot as plt\n",
        "  from sklearn.metrics import r2_score, mean_squared_error\n",
        "\n",
        "  #load historic data for equations\n",
        "  wr = pd.read_csv('FantasyPros_Fantasy_Football_Statistics_WR.csv')\n",
        "  rb = pd.read_csv('FantasyPros_Fantasy_Football_Statistics_RB.csv')\n",
        "  te = pd.read_csv('FantasyPros_Fantasy_Football_Statistics_TE.csv')\n",
        "  qb = pd.read_csv('FantasyPros_Fantasy_Football_Statistics_QB.csv')\n",
        "\n",
        "  # use eq finder for each positon\n",
        "  #wrparams, wr_replacement = find_equation(wr, 'WR')\n",
        "  #rbparams, rb_replacement = find_equation(rb, 'RB')\n",
        "  #teparams, te_replacement = find_equation(te, 'TE')\n",
        "  #qbparams, qb_replacement = find_equation(qb, 'QB')\n",
        "\n",
        "  #use params and replacement to calculate value of each called player and sum them\n",
        "  side1_score = 0\n",
        "  side2_score = 0\n",
        "\n",
        "  par = 0\n",
        "  #side 1\n",
        "  for player in side1:\n",
        "    #identify position of the player\n",
        "    player_position = rankings.loc[rankings['Name'] == player, 'Position'].values[0]\n",
        "    player_rank = rankings.loc[rankings['Name'] == player, 'Rank'].values[0]\n",
        "\n",
        "    #calc par depending on position\n",
        "    if player_position == \"WR\":\n",
        "      wrparams, wr_replacement = find_equation(wr, 'WR', player, player_rank)\n",
        "      par = calc_par(player, rankings, wrparams, wr_replacement)\n",
        "    elif player_position == \"RB\":\n",
        "      rbparams, rb_replacement = find_equation(rb, 'RB', player, player_rank)\n",
        "      par = calc_par(player, rankings, rbparams, rb_replacement)\n",
        "    elif player_position == \"TE\":\n",
        "      teparams, te_replacement = find_equation(te, 'TE', player, player_rank)\n",
        "      par = calc_par(player, rankings, rbparams, rb_replacement)\n",
        "    elif player_position == \"QB\":\n",
        "      qbparams, qb_replacement = find_equation(qb, 'QB', player, player_rank)\n",
        "      par = calc_par(player, rankings, rbparams, rb_replacement)\n",
        "\n",
        "    print('Player ', player, ' par: ',par, '\\n')\n",
        "    side1_score += par\n",
        "\n",
        "  #side 2\n",
        "  for player in side2:\n",
        "    #identify position of the player\n",
        "    player_position = rankings.loc[rankings['Name'] == player, 'Position'].values[0]\n",
        "    player_rank = rankings.loc[rankings['Name'] == player, 'Rank'].values[0]\n",
        "\n",
        "    #calc par depending on position\n",
        "    if player_position == \"WR\":\n",
        "      wrparams, wr_replacement = find_equation(wr, 'WR', player, player_rank)\n",
        "      par = calc_par(player, rankings, wrparams, wr_replacement)\n",
        "    elif player_position == \"RB\":\n",
        "      rbparams, rb_replacement = find_equation(rb, 'RB', player, player_rank)\n",
        "      par = calc_par(player, rankings, rbparams, rb_replacement)\n",
        "    elif player_position == \"TE\":\n",
        "      teparams, te_replacement = find_equation(te, 'TE', player, player_rank)\n",
        "      par = calc_par(player, rankings, teparams, te_replacement)\n",
        "    elif player_position == \"QB\":\n",
        "      qbparams, qb_replacement = find_equation(qb, 'QB', player, player_rank)\n",
        "      par = calc_par(player, rankings, qbparams, qb_replacement)\n",
        "\n",
        "    print('Player ', player, ' par: ',par, '\\n')\n",
        "    side2_score += par\n",
        "\n",
        "\n",
        "  #give insight on if trade is even or not\n",
        "  score_difference = abs(side1_score - side2_score)\n",
        "\n",
        "\n",
        "  if score_difference < 1:\n",
        "        insight = \"Trade is very even\"\n",
        "  elif 1 <= score_difference < 3:\n",
        "        insight = \"It's close, but there is a winner\"\n",
        "  elif 3 <= score_difference < 5:\n",
        "        insight = \"Clear Winner\"\n",
        "  elif score_difference >= 5:\n",
        "        insight = \"Trade is unfair\"\n",
        "  else:\n",
        "        insight = \"Invalid input or unexpected case.\"\n",
        "\n",
        "  results = f\"Side 1 {side1} score: {side1_score}\", f\"Side 2 {side2} score: {side2_score}\"\n",
        "  print('\\n')\n",
        "  print(insight)\n",
        "  return results\n"
      ],
      "metadata": {
        "id": "69jyvzDlqqgg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Test on predicted rankings from deliverable 3\n",
        "\n",
        "- Rankings need ['Rank'], ['Name'], ['Position']"
      ],
      "metadata": {
        "id": "uPzpkJXprKEI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "HjV6-KmjudKg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "chip_rankings = pd.read_csv('chip_rankings.csv')"
      ],
      "metadata": {
        "id": "WK8tGnmZrOgV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cols = ['Player', 'PredictedPoints']\n",
        "chip_rankings = chip_rankings[cols]\n",
        "chip_rankings['Rank'] = chip_rankings.index\n",
        "chip_rankings['Position'] = 'WR'\n",
        "chip_rankings = chip_rankings.drop('PredictedPoints', axis=1)\n",
        "chip_rankings['Name'] = chip_rankings['Player']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X1vaMblguyuf",
        "outputId": "27d72bcc-2fed-4f6a-9fb7-918c53023f19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-6-581d4dc420ea>:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  chip_rankings['Rank'] = chip_rankings.index\n",
            "<ipython-input-6-581d4dc420ea>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  chip_rankings['Position'] = 'WR'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "chip_rankings.head(30)"
      ],
      "metadata": {
        "id": "Xpqh7zpXw2ls",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 990
        },
        "outputId": "9e384023-4bed-45e7-f6b4-508edad515a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 Player  Rank Position                 Name\n",
              "0         Brandon Aiyuk     0       WR        Brandon Aiyuk\n",
              "1            A.J. Brown     1       WR           A.J. Brown\n",
              "2           CeeDee Lamb     2       WR          CeeDee Lamb\n",
              "3          Keenan Allen     3       WR         Keenan Allen\n",
              "4      Justin Jefferson     4       WR     Justin Jefferson\n",
              "5            Puka Nacua     5       WR           Puka Nacua\n",
              "6             Tank Dell     6       WR            Tank Dell\n",
              "7          Stefon Diggs     7       WR         Stefon Diggs\n",
              "8           Tyreek Hill     8       WR          Tyreek Hill\n",
              "9         Davante Adams     9       WR        Davante Adams\n",
              "10         Adam Thielen    10       WR         Adam Thielen\n",
              "11           Noah Brown    11       WR           Noah Brown\n",
              "12    Amon-Ra St. Brown    12       WR    Amon-Ra St. Brown\n",
              "13         Deebo Samuel    13       WR         Deebo Samuel\n",
              "14       Jordan Addison    14       WR       Jordan Addison\n",
              "15         Nico Collins    15       WR         Nico Collins\n",
              "16        DeVonta Smith    16       WR        DeVonta Smith\n",
              "17  Michael Pittman Jr.    17       WR  Michael Pittman Jr.\n",
              "18             DJ Moore    18       WR             DJ Moore\n",
              "19      DeAndre Hopkins    19       WR      DeAndre Hopkins\n",
              "20       Christian Kirk    20       WR       Christian Kirk\n",
              "21       Garrett Wilson    21       WR       Garrett Wilson\n",
              "22          Tutu Atwell    22       WR          Tutu Atwell\n",
              "23     Courtland Sutton    23       WR     Courtland Sutton\n",
              "24        Mike Williams    24       WR        Mike Williams\n",
              "25          Chris Olave    25       WR          Chris Olave\n",
              "26        Rondale Moore    26       WR        Rondale Moore\n",
              "27        Jakobi Meyers    27       WR        Jakobi Meyers\n",
              "28        Jaylen Waddle    28       WR        Jaylen Waddle\n",
              "29           DK Metcalf    29       WR           DK Metcalf"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6e7bea46-555a-4ed8-9e69-d082338d7379\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Player</th>\n",
              "      <th>Rank</th>\n",
              "      <th>Position</th>\n",
              "      <th>Name</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Brandon Aiyuk</td>\n",
              "      <td>0</td>\n",
              "      <td>WR</td>\n",
              "      <td>Brandon Aiyuk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>A.J. Brown</td>\n",
              "      <td>1</td>\n",
              "      <td>WR</td>\n",
              "      <td>A.J. Brown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>CeeDee Lamb</td>\n",
              "      <td>2</td>\n",
              "      <td>WR</td>\n",
              "      <td>CeeDee Lamb</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Keenan Allen</td>\n",
              "      <td>3</td>\n",
              "      <td>WR</td>\n",
              "      <td>Keenan Allen</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Justin Jefferson</td>\n",
              "      <td>4</td>\n",
              "      <td>WR</td>\n",
              "      <td>Justin Jefferson</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Puka Nacua</td>\n",
              "      <td>5</td>\n",
              "      <td>WR</td>\n",
              "      <td>Puka Nacua</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Tank Dell</td>\n",
              "      <td>6</td>\n",
              "      <td>WR</td>\n",
              "      <td>Tank Dell</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Stefon Diggs</td>\n",
              "      <td>7</td>\n",
              "      <td>WR</td>\n",
              "      <td>Stefon Diggs</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Tyreek Hill</td>\n",
              "      <td>8</td>\n",
              "      <td>WR</td>\n",
              "      <td>Tyreek Hill</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Davante Adams</td>\n",
              "      <td>9</td>\n",
              "      <td>WR</td>\n",
              "      <td>Davante Adams</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Adam Thielen</td>\n",
              "      <td>10</td>\n",
              "      <td>WR</td>\n",
              "      <td>Adam Thielen</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Noah Brown</td>\n",
              "      <td>11</td>\n",
              "      <td>WR</td>\n",
              "      <td>Noah Brown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Amon-Ra St. Brown</td>\n",
              "      <td>12</td>\n",
              "      <td>WR</td>\n",
              "      <td>Amon-Ra St. Brown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Deebo Samuel</td>\n",
              "      <td>13</td>\n",
              "      <td>WR</td>\n",
              "      <td>Deebo Samuel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Jordan Addison</td>\n",
              "      <td>14</td>\n",
              "      <td>WR</td>\n",
              "      <td>Jordan Addison</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Nico Collins</td>\n",
              "      <td>15</td>\n",
              "      <td>WR</td>\n",
              "      <td>Nico Collins</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>DeVonta Smith</td>\n",
              "      <td>16</td>\n",
              "      <td>WR</td>\n",
              "      <td>DeVonta Smith</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Michael Pittman Jr.</td>\n",
              "      <td>17</td>\n",
              "      <td>WR</td>\n",
              "      <td>Michael Pittman Jr.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>DJ Moore</td>\n",
              "      <td>18</td>\n",
              "      <td>WR</td>\n",
              "      <td>DJ Moore</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>DeAndre Hopkins</td>\n",
              "      <td>19</td>\n",
              "      <td>WR</td>\n",
              "      <td>DeAndre Hopkins</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Christian Kirk</td>\n",
              "      <td>20</td>\n",
              "      <td>WR</td>\n",
              "      <td>Christian Kirk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Garrett Wilson</td>\n",
              "      <td>21</td>\n",
              "      <td>WR</td>\n",
              "      <td>Garrett Wilson</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Tutu Atwell</td>\n",
              "      <td>22</td>\n",
              "      <td>WR</td>\n",
              "      <td>Tutu Atwell</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Courtland Sutton</td>\n",
              "      <td>23</td>\n",
              "      <td>WR</td>\n",
              "      <td>Courtland Sutton</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>Mike Williams</td>\n",
              "      <td>24</td>\n",
              "      <td>WR</td>\n",
              "      <td>Mike Williams</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Chris Olave</td>\n",
              "      <td>25</td>\n",
              "      <td>WR</td>\n",
              "      <td>Chris Olave</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Rondale Moore</td>\n",
              "      <td>26</td>\n",
              "      <td>WR</td>\n",
              "      <td>Rondale Moore</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>Jakobi Meyers</td>\n",
              "      <td>27</td>\n",
              "      <td>WR</td>\n",
              "      <td>Jakobi Meyers</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>Jaylen Waddle</td>\n",
              "      <td>28</td>\n",
              "      <td>WR</td>\n",
              "      <td>Jaylen Waddle</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>DK Metcalf</td>\n",
              "      <td>29</td>\n",
              "      <td>WR</td>\n",
              "      <td>DK Metcalf</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6e7bea46-555a-4ed8-9e69-d082338d7379')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6e7bea46-555a-4ed8-9e69-d082338d7379 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6e7bea46-555a-4ed8-9e69-d082338d7379');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-af9edb69-cfd4-40d2-86fc-a555efd5ba55\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-af9edb69-cfd4-40d2-86fc-a555efd5ba55')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-af9edb69-cfd4-40d2-86fc-a555efd5ba55 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "wr = pd.read_csv('FantasyPros_Fantasy_Football_Statistics_WR.csv')\n",
        "rb = pd.read_csv('FantasyPros_Fantasy_Football_Statistics_RB.csv')\n",
        "te = pd.read_csv('FantasyPros_Fantasy_Football_Statistics_TE.csv')\n",
        "qb = pd.read_csv('FantasyPros_Fantasy_Football_Statistics_QB.csv')"
      ],
      "metadata": {
        "id": "TTuvzXDRdnUv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "wr.head(30)"
      ],
      "metadata": {
        "id": "NjD7hn8-d3sC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cols = ['Rank', 'Player']\n",
        "wr = wr[cols]\n",
        "rb = rb[cols]\n",
        "te = te[cols]\n",
        "qb = qb[cols]\n",
        "\n",
        "wr['Rank'] = wr['Rank']-1\n",
        "rb['Rank'] = rb['Rank']-1\n",
        "te['Rank'] = te['Rank']-1\n",
        "qb['Rank'] = qb['Rank']-1\n",
        "\n",
        "\n",
        "regex_pattern = r'^(.*?)(?=\\()'\n",
        "\n",
        "\n",
        "wr['Name'] = wr['Player'].str.extract(regex_pattern)\n",
        "rb['Name'] = rb['Player'].str.extract(regex_pattern)\n",
        "te['Name'] = te['Player'].str.extract(regex_pattern)\n",
        "qb['Name'] = qb['Player'].str.extract(regex_pattern)\n",
        "\n",
        "wr['Name'] = wr['Name'].str[:-1]\n",
        "rb['Name'] = rb['Name'].str[:-1]\n",
        "te['Name'] = te['Name'].str[:-1]\n",
        "qb['Name'] = qb['Name'].str[:-1]\n",
        "\n",
        "wr['Position'] = 'WR'\n",
        "rb['Position'] = 'RB'\n",
        "te['Position'] = 'TE'\n",
        "qb['Position'] = 'QB'\n"
      ],
      "metadata": {
        "id": "-_dPXg82d501",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e43b6ef2-664a-4057-a8f5-d5a869bab854"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-8-6a635e11c2a0>:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  wr['Rank'] = wr['Rank']-1\n",
            "<ipython-input-8-6a635e11c2a0>:8: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  rb['Rank'] = rb['Rank']-1\n",
            "<ipython-input-8-6a635e11c2a0>:9: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  te['Rank'] = te['Rank']-1\n",
            "<ipython-input-8-6a635e11c2a0>:10: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  qb['Rank'] = qb['Rank']-1\n",
            "<ipython-input-8-6a635e11c2a0>:16: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  wr['Name'] = wr['Player'].str.extract(regex_pattern)\n",
            "<ipython-input-8-6a635e11c2a0>:17: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  rb['Name'] = rb['Player'].str.extract(regex_pattern)\n",
            "<ipython-input-8-6a635e11c2a0>:18: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  te['Name'] = te['Player'].str.extract(regex_pattern)\n",
            "<ipython-input-8-6a635e11c2a0>:19: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  qb['Name'] = qb['Player'].str.extract(regex_pattern)\n",
            "<ipython-input-8-6a635e11c2a0>:21: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  wr['Name'] = wr['Name'].str[:-1]\n",
            "<ipython-input-8-6a635e11c2a0>:22: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  rb['Name'] = rb['Name'].str[:-1]\n",
            "<ipython-input-8-6a635e11c2a0>:23: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  te['Name'] = te['Name'].str[:-1]\n",
            "<ipython-input-8-6a635e11c2a0>:24: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  qb['Name'] = qb['Name'].str[:-1]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rb.head(21)"
      ],
      "metadata": {
        "id": "wYYwitemjY0P"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fpros_rankings = pd.concat([wr, rb, te, qb], ignore_index=True)"
      ],
      "metadata": {
        "id": "yvj31el1g-b0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "flock_wr = pd.read_csv('flock_wr.csv')\n",
        "flock_rb = pd.read_csv('flock_rb.csv')\n",
        "flock_te = pd.read_csv('flock_te.csv')\n",
        "flock_qb = pd.read_csv('flock_qb.csv')\n",
        "\n",
        "flock_rankings = pd.concat([flock_wr, flock_rb, flock_te, flock_qb], ignore_index=True)\n",
        "flock_rankings['Rank'] = flock_rankings['Rank']-1"
      ],
      "metadata": {
        "id": "MDv_mfjusWxc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "flock_rb.head(25)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 833
        },
        "id": "7UEKwHHps89r",
        "outputId": "f3f9f47b-34d2-451c-ce70-2941f4a7b8ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Rank                 Name Team Position  Average Rank\n",
              "0      1  Christian McCaffrey   SF       RB          1.75\n",
              "1      2       Travis Etienne  JAX       RB          9.50\n",
              "2      3       Bijan Robinson  ATL       RB         10.75\n",
              "3      4          Josh Jacobs   LV       RB         17.50\n",
              "4      5        Austin Ekeler  LAC       RB         17.75\n",
              "5      6          Breece Hall  NYJ       RB         21.75\n",
              "6      7         Jahmyr Gibbs  DET       RB         22.50\n",
              "7      8       Saquon Barkley  NYG       RB         25.50\n",
              "8      9        D'Andre Swift  PHI       RB         26.50\n",
              "9     10         Alvin Kamara   NO       RB         27.75\n",
              "10    11         Tony Pollard  DAL       RB         30.00\n",
              "11    12        Derrick Henry  TEN       RB         32.00\n",
              "12    13       Kenneth Walker  SEA       RB         35.50\n",
              "13    14         Devon Achane  MIA       RB         35.75\n",
              "14    15     David Montgomery  DET       RB         41.50\n",
              "15    16       Kyren Williams  LAR       RB         42.00\n",
              "16    17      Jonathan Taylor  IND       RB         43.50\n",
              "17    18       Raheem Mostert  MIA       RB         50.00\n",
              "18    19        Isiah Pacheco   KC       RB         50.25\n",
              "19    20     Javonte Williams  DEN       RB         53.00\n",
              "20    21        Rachaad White   TB       RB         54.50\n",
              "21    22            Joe Mixon  CIN       RB         58.50\n",
              "22    23          Aaron Jones   GB       RB         58.75\n",
              "23    24         James Conner  ARI       RB         59.25\n",
              "24    25           James Cook  BUF       RB         63.25"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2c94e9fb-a08c-4ffc-bfd2-5c987134fcf6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Rank</th>\n",
              "      <th>Name</th>\n",
              "      <th>Team</th>\n",
              "      <th>Position</th>\n",
              "      <th>Average Rank</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Christian McCaffrey</td>\n",
              "      <td>SF</td>\n",
              "      <td>RB</td>\n",
              "      <td>1.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Travis Etienne</td>\n",
              "      <td>JAX</td>\n",
              "      <td>RB</td>\n",
              "      <td>9.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Bijan Robinson</td>\n",
              "      <td>ATL</td>\n",
              "      <td>RB</td>\n",
              "      <td>10.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Josh Jacobs</td>\n",
              "      <td>LV</td>\n",
              "      <td>RB</td>\n",
              "      <td>17.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Austin Ekeler</td>\n",
              "      <td>LAC</td>\n",
              "      <td>RB</td>\n",
              "      <td>17.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>Breece Hall</td>\n",
              "      <td>NYJ</td>\n",
              "      <td>RB</td>\n",
              "      <td>21.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>Jahmyr Gibbs</td>\n",
              "      <td>DET</td>\n",
              "      <td>RB</td>\n",
              "      <td>22.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>Saquon Barkley</td>\n",
              "      <td>NYG</td>\n",
              "      <td>RB</td>\n",
              "      <td>25.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>D'Andre Swift</td>\n",
              "      <td>PHI</td>\n",
              "      <td>RB</td>\n",
              "      <td>26.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>Alvin Kamara</td>\n",
              "      <td>NO</td>\n",
              "      <td>RB</td>\n",
              "      <td>27.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>11</td>\n",
              "      <td>Tony Pollard</td>\n",
              "      <td>DAL</td>\n",
              "      <td>RB</td>\n",
              "      <td>30.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>12</td>\n",
              "      <td>Derrick Henry</td>\n",
              "      <td>TEN</td>\n",
              "      <td>RB</td>\n",
              "      <td>32.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>13</td>\n",
              "      <td>Kenneth Walker</td>\n",
              "      <td>SEA</td>\n",
              "      <td>RB</td>\n",
              "      <td>35.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>14</td>\n",
              "      <td>Devon Achane</td>\n",
              "      <td>MIA</td>\n",
              "      <td>RB</td>\n",
              "      <td>35.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>15</td>\n",
              "      <td>David Montgomery</td>\n",
              "      <td>DET</td>\n",
              "      <td>RB</td>\n",
              "      <td>41.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>16</td>\n",
              "      <td>Kyren Williams</td>\n",
              "      <td>LAR</td>\n",
              "      <td>RB</td>\n",
              "      <td>42.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>17</td>\n",
              "      <td>Jonathan Taylor</td>\n",
              "      <td>IND</td>\n",
              "      <td>RB</td>\n",
              "      <td>43.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>18</td>\n",
              "      <td>Raheem Mostert</td>\n",
              "      <td>MIA</td>\n",
              "      <td>RB</td>\n",
              "      <td>50.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>19</td>\n",
              "      <td>Isiah Pacheco</td>\n",
              "      <td>KC</td>\n",
              "      <td>RB</td>\n",
              "      <td>50.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>20</td>\n",
              "      <td>Javonte Williams</td>\n",
              "      <td>DEN</td>\n",
              "      <td>RB</td>\n",
              "      <td>53.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>21</td>\n",
              "      <td>Rachaad White</td>\n",
              "      <td>TB</td>\n",
              "      <td>RB</td>\n",
              "      <td>54.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>22</td>\n",
              "      <td>Joe Mixon</td>\n",
              "      <td>CIN</td>\n",
              "      <td>RB</td>\n",
              "      <td>58.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>23</td>\n",
              "      <td>Aaron Jones</td>\n",
              "      <td>GB</td>\n",
              "      <td>RB</td>\n",
              "      <td>58.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>24</td>\n",
              "      <td>James Conner</td>\n",
              "      <td>ARI</td>\n",
              "      <td>RB</td>\n",
              "      <td>59.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>25</td>\n",
              "      <td>James Cook</td>\n",
              "      <td>BUF</td>\n",
              "      <td>RB</td>\n",
              "      <td>63.25</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2c94e9fb-a08c-4ffc-bfd2-5c987134fcf6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2c94e9fb-a08c-4ffc-bfd2-5c987134fcf6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2c94e9fb-a08c-4ffc-bfd2-5c987134fcf6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-546c66af-a1e3-415c-b05f-67ecd847716c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-546c66af-a1e3-415c-b05f-67ecd847716c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-546c66af-a1e3-415c-b05f-67ecd847716c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from scipy.optimize import curve_fit\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import r2_score, mean_squared_error"
      ],
      "metadata": {
        "id": "AeBck3QTxX1H"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "trade_calculate(['Christian McCaffrey'], ['A.J. Brown', 'Chris Olave'], flock_rankings)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "SXCnPflCwuXT",
        "outputId": "a1715ba1-4004-4532-889c-02d2a9a09063"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "y = 2590.89 / (25.1987x + 173.95) + 9.21\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAh8AAAGiCAYAAABH4aTnAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABPJElEQVR4nO3deVwU9f8H8NdyLSCwyA2BgKLgiYVKWF5JoqVfTE1Tv4Vl+vW+MssOj44vpWVeqZXl0RePLDXT0hQFS/G+U1EQQxNBURZBOffz+2N+LC7scgmzHK/n4zEPdmc+O/NmXHdfzHzmMwohhAARERGRTEyMXQARERE1LAwfREREJCuGDyIiIpIVwwcRERHJiuGDiIiIZMXwQURERLJi+CAiIiJZMXwQERGRrBg+iIiISFYMH0RERCSrSoWP5cuXo127drCzs4OdnR1CQkLw22+/aZfn5ORg/PjxcHR0hI2NDQYOHIjU1NRqL5qIiIjqLkVl7u3yyy+/wNTUFM2bN4cQAmvWrMH8+fNx8uRJtG7dGmPHjsWOHTuwevVqqFQqTJgwASYmJjhw4EBN/g5ERERUh1QqfOjj4OCA+fPnY9CgQXB2dsa6deswaNAgAMDFixfRsmVLxMXF4cknn6yWgomIiKhuM6vqCwsLC7Fp0yZkZ2cjJCQEx48fR35+PkJDQ7VtAgIC0KRJkzLDR25uLnJzc7XPNRoN7ty5A0dHRygUiqqWR0RERDISQuDevXvw8PCAiUnZvToqHT7Onj2LkJAQ5OTkwMbGBlu2bEGrVq1w6tQpWFhYwN7eXqe9q6srbt68aXB9kZGRmDt3bmXLICIiolro2rVr8PT0LLNNpcOHv78/Tp06BbVajR9//BERERGIjY2tcpEzZ87EtGnTtM/VajWaNGmCa9euwc7OrsrrJSIiIvlkZmbCy8sLtra25batdPiwsLCAn58fACAoKAhHjx7FokWLMGTIEOTl5SEjI0Pn6Edqairc3NwMrk+pVEKpVJaaX3RFDREREdUdFeky8cjjfGg0GuTm5iIoKAjm5uaIjo7WLouPj0dycjJCQkIedTNERERUT1TqyMfMmTPRp08fNGnSBPfu3cO6desQExODXbt2QaVSYeTIkZg2bRocHBxgZ2eHiRMnIiQkhFe6EBERkValwkdaWhpeeeUVpKSkQKVSoV27dti1axeeffZZAMAXX3wBExMTDBw4ELm5uQgLC8OyZctqpHAiIiKqmx55nI/qlpmZCZVKBbVazT4f1GAIIVBQUIDCwkJjl0JEZJC5uTlMTU31LqvM93eVx/kgouqRl5eHlJQU3L9/39ilEBGVSaFQwNPTEzY2No+0HoYPIiPSaDRISkqCqakpPDw8YGFhwcH1iKhWEkLg1q1buH79Opo3b27wCEhFMHwQGVFeXh40Gg28vLxgbW1t7HKIiMrk7OyMq1evIj8//5HCxyNfaktEj668oYiJiGqD6joyy088IiIikhXDBxEREcmK4YOIqkQIgdGjR8PBwQEKhQL29vaYMmWKscsiojqAHU6JqEp27tyJ1atXIyYmBk2bNoWJiQmsrKy0y318fDBlyhQGEiIqheGDiKokMTER7u7u6Ny5s7FLIaI6huGDqDYRAjDWYGPW1kAFe7KPGDECa9asASD1fvf29oaPjw/at2+PhQsXonv37vj7778xdepUTJ06FYB0moaICGD4IKpd7t8HHnHkwCrLygIaNapQ00WLFqFZs2b4+uuvcfToUZiamuLFF1/ULt+8eTMCAwMxevRojBo1qqYqJqI6iuGDiCpNpVLB1tYWpqamcHNzK7XcwcEBpqamsLW11buciBo2hg+i2sTaWjoCYaxtExHJgOGDqDZRKCp86oOIqK7iOB9EVCMsLCxQWFho7DKIqBZi+CCiGuHj44P9+/fjn3/+we3bt41dDhHVIgwfRFQjPvjgA1y9ehXNmjWDs7OzscsholpEIWrZxfeZmZlQqVRQq9Wws7MzdjlENSonJwdJSUnw9fWFpaWlscshIipTWZ9Zlfn+5pEPIiIikhXDBxEREcmK4YOIiIhkxfBBREREsmL4ICIiIlkxfBAREZGsGD6IiIhIVgwfREREJCuGDyIiIpIVwwcRUS3TvXt3TJkyxdhlENUYhg8iqrK4uDiYmpri+eefN3YpslAoFNrJzs4OHTt2xM8//2zssuq01atXw97e3thlkMwYPoioyr799ltMnDgR+/fvx40bN2p0W0IIFBQU1Og2KmLVqlVISUnBsWPH8NRTT2HQoEE4e/asscsiqlMYPohqoey8bINTTkFOhds+yH9QobZVkZWVhY0bN2Ls2LF4/vnnsXr1au2yYcOGYciQITrt8/Pz4eTkhLVr1wIANBoNIiMj4evrCysrKwQGBuLHH3/Uto+JiYFCocBvv/2GoKAgKJVK/Pnnn0hMTER4eDhcXV1hY2ODjh07Ys+ePTrbSklJwfPPPw8rKyv4+vpi3bp18PHxwcKFC7VtMjIy8Prrr8PZ2Rl2dnZ45plncPr06XJ/b3t7e7i5uaFFixb48MMPUVBQgH379mmXX7t2DYMHD4a9vT0cHBwQHh6Oq1evapePGDEC/fv3x9y5c7XbHjNmDPLy8gxu8/vvv0eHDh1ga2sLNzc3DBs2DGlpaTpt/vrrL/Tt2xd2dnawtbVFly5dkJiYqF2+cuVKtGzZEpaWlggICMCyZcu0y65evQqFQoEffvgBXbp0gZWVFTp27IhLly7h6NGj6NChA2xsbNCnTx/cunVLZ7sVWe/mzZvRo0cPWFtbIzAwEHFxcQCkf+NXX30VarVae0Rpzpw55f4bUD0gahm1Wi0ACLVabexSiGrcgwcPxPnz58WDBw905mMODE7PRT2n09b6Y2uDbbut6qbT1mmek952VfHtt9+KDh06CCGE+OWXX0SzZs2ERqMRQgixfft2YWVlJe7du6dt/8svvwgrKyuRmZkphBDio48+EgEBAWLnzp0iMTFRrFq1SiiVShETEyOEEGLfvn0CgGjXrp34/fffRUJCgkhPTxenTp0SK1asEGfPnhWXLl0S7733nrC0tBR///23dluhoaGiffv24tChQ+L48eOiW7duwsrKSnzxxRc6bfr16yeOHj0qLl26JN544w3h6Ogo0tPTDf7OAMSWLVuEEELk5+eLL774QgAQy5cvF0IIkZeXJ1q2bClee+01cebMGXH+/HkxbNgw4e/vL3Jzc4UQQkRERAgbGxsxZMgQce7cObF9+3bh7Ows3nnnHe12unXrJiZPnqyzr3/99VeRmJgo4uLiREhIiOjTp492+fXr14WDg4MYMGCAOHr0qIiPjxffffeduHjxohBCiP/973/C3d1d/PTTT+LKlSvip59+Eg4ODmL16tVCCCGSkpIEAO2/x/nz58WTTz4pgoKCRPfu3cWff/4pTpw4Ifz8/MSYMWO0263Merdv3y7i4+PFoEGDhLe3t8jPzxe5ubli4cKFws7OTqSkpIiUlBSd9wzVPoY+s4So3Pc3wweREdXl8NG5c2excOFCIYT0Rezk5CT27dun83zt2rXa9kOHDhVDhgwRQgiRk5MjrK2txcGDB3XWOXLkSDF06FAhRHH42Lp1a7m1tG7dWixZskQIIcSFCxcEAHH06FHt8suXLwsA2vDxxx9/CDs7O5GTk6OznmbNmomvvvrK4HYACEtLS9GoUSNhYmIiAAgfHx9tYPn++++Fv7+/NoQJIURubq6wsrISu3btEkJI4cPBwUFkZ2dr2yxfvlzY2NiIwsJCIUTp8FHS0aNHBQDtF/XMmTOFr6+vyMvL09u+WbNmYt26dTrzPvzwQxESEiKEKA4JK1eu1C5fv369ACCio6O18yIjI4W/v/8jrfevv/4SAMSFCxeEEEKsWrVKqFQqg78r1S7VFT7MZD7QQkQVkDUzy+AyUxNTnedp09MMtARMFLpnVq9OvvpIdRWJj4/HkSNHsGXLFgCAmZkZhgwZgm+//Rbdu3eHmZkZBg8ejKioKLz88svIzs7Gzz//jA0bNgAAEhIScP/+fTz77LM6683Ly8Pjjz+uM69Dhw46z7OysjBnzhzs2LEDKSkpKCgowIMHD5CcnKytzczMDE888YT2NX5+fmjcuLH2+enTp5GVlQVHR0eddT948EDnVIU+X3zxBUJDQ3HlyhVMnToVixcvhoODg3a9CQkJsLW11XlNTk6OznoDAwNhbW2tfR4SEoKsrCxcu3YN3t7epbZ5/PhxzJkzB6dPn8bdu3eh0WgAAMnJyWjVqhVOnTqFLl26wNzcvNRrs7OzkZiYiJEjR2LUqFHa+QUFBVCpVDpt27Vrp33s6uoKAGjbtq3OvKLTPVVdr7u7OwAgLS0NAQEBpeqlhoHhg6gWamTRyOhty/Ltt9+ioKAAHh4e2nlCCCiVSixduhQqlQrDhw9Ht27dkJaWht27d8PKygq9e/cGIAUIANixYwcee+wxnXUrlUrdmhvp1jx9+nTs3r0bn332Gfz8/GBlZYVBgwaV2WeipKysLLi7uyMmJqbUsvKuvHBzc4Ofnx/8/PywatUqPPfcczh//jxcXFyQlZWFoKAgREVFlXqds7Nzhet7WHZ2NsLCwhAWFoaoqCg4OzsjOTkZYWFh2t/ZysrK4OuL9vU333yD4OBgnWWmprpB9uHwolAo9M4rCj6Put6i9VDDxPBBRJVSUFCAtWvX4vPPP0evXr10lvXv3x/r16/HmDFj0LlzZ3h5eWHjxo347bff8OKLL2q/hFq1agWlUonk5GR069atUts/cOAARowYgRdeeAGA9CX4cIdOf39/FBQU4OTJkwgKCgIgHWm5e/euts0TTzyBmzdvwszMDD4+PlXYC5JOnTohKCgIH3/8MRYtWoQnnngCGzduhIuLC+zs7Ay+7vTp03jw4IE2NBw6dAg2Njbw8vIq1fbixYtIT0/HJ598ol1+7NgxnTbt2rXDmjVrkJ+fX+roh6urKzw8PHDlyhUMHz68yr9rSdW1XgsLCxQWFlZbXVQ38GoXIqqU7du34+7duxg5ciTatGmjMw0cOBDffvuttu2wYcOwYsUK7N69W+cLytbWFtOnT8fUqVOxZs0aJCYm4sSJE1iyZAnWrFlT5vabN2+OzZs349SpUzh9+jSGDRum81d0QEAAQkNDMXr0aBw5cgQnT57E6NGjYWVlpf2rOzQ0FCEhIejfvz9+//13XL16FQcPHsS7775b6ou9PFOmTMFXX32Ff/75B8OHD4eTkxPCw8Pxxx9/ICkpCTExMZg0aRKuX7+ufU1eXh5GjhyJ8+fP49dff8Xs2bMxYcIEmJiU/khu0qQJLCwssGTJEly5cgXbtm3Dhx9+qNNmwoQJyMzMxEsvvYRjx47h8uXL+P777xEfHw8AmDt3LiIjI7F48WJcunQJZ8+exapVq7BgwYJK/a4lVcd6fXx8kJWVhejoaNy+fRv3799/pJqojqiB/iiPhB1OqSEpq/NWbdW3b1/x3HPP6V12+PBhAUCcPn1aCCHE+fPnBQDh7e2t0wlTCCE0Go1YuHCh8Pf3F+bm5sLZ2VmEhYWJ2NhYIURxh9O7d+/qvC4pKUn06NFDWFlZCS8vL7F06dJSHTRv3Lgh+vTpI5RKpfD29hbr1q0TLi4uYsWKFdo2mZmZYuLEicLDw0OYm5sLLy8vMXz4cJGcnGzwd8dDV7s8/HsEBASIsWPHCiGESElJEa+88opwcnISSqVSNG3aVIwaNUr7mRYRESHCw8PFrFmzhKOjo7CxsRGjRo3S6fxa8vdZt26d8PHxEUqlUoSEhIht27YJAOLkyZPaNqdPnxa9evUS1tbWwtbWVnTp0kUkJiZql0dFRYn27dsLCwsL0bhxY9G1a1exefNm7T4tuT59+19f59DKrvfu3bsCgLZzshBCjBkzRjg6OgoAYvbs2Qb3PxlfdXU4VQghhHFij36ZmZlQqVRQq9VlHrYkqg9ycnKQlJQEX19fWFpaGruceuv69evw8vLCnj170LNnT6PWMmLECGRkZGDr1q1GrYOoKsr6zKrM9zf7fBBRvbN3715kZWWhbdu2SElJwYwZM+Dj44OuXbsauzQiAsMHEdVD+fn5eOedd3DlyhXY2tqic+fOiIqK0nspKhHJj+GDiOqdoktTa6OHh6Enaqh4tQsRERHJiuGDiIiIZMXwQURERLJi+CAiIiJZscMpUT0ghEB6fj6yCgthY2oKR3Nz7WieRES1DcMHUR2WkZ+PNampWHL9OhJzcrTzm1laYqKnJyJcXWHPy0uJqJbhaReiOmrXnTvwjIvD1IQEXHkoeADAlZwcTE1IgGdcHHbduSN7batXry737rC1XUxMDBQKBTIyMir92u7du2PKlClG2XZ9MWfOHLi6ukKhUGhHg9U3j4rVpf93DB9EddCuO3fw/JkzeKDRQAAoeY+EonkPNBo8f+ZMtQeQESNGQKFQQKFQwMLCAn5+fvjggw9QUFBQrdupSSdPnsSLL74IV1dXWFpaonnz5hg1ahQuXbr0yOvevHlzqZu/GaIvqHTu3BkpKSlQqVSPXEtZ5syZA4VCgd69e5daNn/+fCgUCnTv3r1S66yO/XrhwgXMnTsXX331FVJSUtCnTx+982qTuvTF/zAhBGbNmgV3d3dYWVkhNDQUly9frvHtMnwQ1TEZ+fkYeO4cBABNOW01kELIwHPnkJGfX6119O7dGykpKbh8+TLeeOMNzJkzB/Pnz6/WbTyqfAO/8/bt2/Hkk08iNzcXUVFRuHDhAv73v/9BpVLh/fffr/L28vLyAAAODg6wtbWt8nosLCzg5uYmS78dd3d37Nu3T+euuwDw3XffoUmTJpVaV3Xt18TERABAeHg43NzcoFQq9c4rqWj/1yXGrnnevHlYvHgxVqxYgcOHD6NRo0YICwtDTomjqdWtUuEjMjISHTt2hK2tLVxcXNC/f3/tLZuLdO/eXfsXUdE0ZsyYai2aqCFbk5qK+xpNucGjiAbAfY0Ga1NTq7UOpVIJNzc3eHt7Y+zYsQgNDcW2bdv0tk1MTER4eDhcXV1hY2ODjh07Ys+ePdrlH3zwAdq0aVPqde3bt9f50lq5ciVatmwJS0tLBAQEYNmyZdplV69ehUKhwMaNG9GtWzdYWloiKiqq1Drv37+PV199Fc899xy2bduG0NBQ+Pr6Ijg4GJ999hm++uornfbHjx9Hhw4dYG1tjc6dO+t85s2ZMwft27fHypUrdW60VfJoxrJly9C8eXNYWlrC1dUVgwYNAiAdQYqNjcWiRYu0n5dXr14tddolPT0dQ4cOxWOPPQZra2u0bdsW69ev16mze/fumDRpEmbMmAEHBwe4ublhzpw5ev89Hubi4oJevXphzZo12nkHDx7E7du38fzzz5dq/91336F169ZQKpVwd3fHhAkTKrVfCwsLMXLkSPj6+sLKygr+/v5YtGiRzj7t168fAMDExAQKhULvvKL9179/f3z88cfw8PCAv78/AODatWsYPHgw7O3t4eDggPDwcFy9ehUAsH//fpibm+PmzZs6v9eUKVPQpUsXg/tpwYIFaNu2LRo1agQvLy+MGzcOWVlZAKTTZK+++irUarX239HQvjf0ntm5cyeefvpp2Nvbw9HREX379tUGLqD4/b1582b06NED1tbWCAwMRFxcnMGab926hQ4dOuCFF15Abm5uqeVCCCxcuBDvvfcewsPD0a5dO6xduxY3btyo8dNalQofsbGxGD9+PA4dOoTdu3cjPz8fvXr1QnZ2tk67UaNGISUlRTvNmzevWosmaqiEEFhS4i/Uilp8/Tpq8ibWVlZWBv+Ky8rKwnPPPYfo6GicPHkSvXv3Rr9+/ZCcnAwAeO2113DhwgUcPXpU+5qTJ0/izJkzePXVVwEAUVFRmDVrFj7++GNcuHAB//3vf/H+++/rfGkCwNtvv43JkyfjwoULeodY37VrF27fvo0ZM2borbXkofN3330Xn3/+OY4dOwYzMzO89tprOssTEhLw008/YfPmzTh16lSp9R07dgyTJk3CBx98gPj4eOzcuVN7g7tFixYhJCRE5zPTy8ur1DpycnIQFBSEHTt24Ny5cxg9ejRefvllHDlyRKfdmjVr0KhRIxw+fBjz5s3DBx98gN27d+v9PR/22muv6Qz7/t1332H48OGwsLDQabd8+XKMHz8eo0ePxtmzZ7Ft2zb4+fkBqPh+1Wg08PT0xKZNm3D+/HnMmjUL77zzDn744QcAwPTp07Fq1SoA0O4TffOKREdHIz4+Hrt378b27duRn5+PsLAw2Nra4o8//sCBAwdgY2OD3r17Iy8vD127dkXTpk3x/fffa9eRn5+PqKioUv+2DzMxMcHixYvx119/Yc2aNdi7d6/2d+3cuTMWLlwIOzs7nZoN0feeyc7OxrRp03Ds2DFER0fDxMQEL7zwAjQa3T8z3n33XUyfPh2nTp1CixYtMHToUL2nO69du4YuXbqgTZs2+PHHH/UeKUpKSsLNmzcRGhqqnadSqRAcHFxmqKkW4hGkpaUJACI2NlY7r1u3bmLy5MkVXkdOTo5Qq9Xa6dq1awKAUKvVj1IaUZ3w4MEDcf78efHgwYMKtb+Vmyuwb1+Vp9t5edVSd0REhAgPDxdCCKHRaMTu3buFUqkU06dPF0IIsWrVKqFSqcpcR+vWrcWSJUu0z/v06SPGjh2rfT5x4kTRvXt37fNmzZqJdevW6azjww8/FCEhIUIIIZKSkgQAsXDhwjK3++mnnwoA4s6dO2W227dvnwAg9uzZo523Y8cOAUD77zV79mxhbm4u0tLSdF778OfgTz/9JOzs7ERmZqbe7ej7zCza9t27dw3W9/zzz4s33nhDZz1PP/20TpuOHTuKt956y+A6Zs+eLQIDA0VeXp5wcXERsbGxIisrS9ja2orTp0+LyZMni27dumnbe3h4iHfffVfvuiq6X/UZP368GDhwoPb5li1bRMmvJ33zIiIihKurq8jNzdXO+/7774W/v7/QaDTaebm5ucLKykrs2rVLW2vLli21y3/66SdhY2MjsrKyKlzzpk2bhKOjo/Z5Rd7zQhh+z5R069YtAUCcPXtWCFH8/l65cqW2zV9//SUAiAsXLujUcPHiReHl5SUmTZqksx9KOnDggAAgbty4oTP/xRdfFIMHD9b7mrI+s9RqdYW/vx+pz4darQYgnd98WFRUFJycnNCmTRvMnDkT9+/fN7iOyMhIqFQq7aQv9RORJKuw8JFef68aO4Ru374dNjY2sLS0RJ8+fTBkyBCDh5qzsrIwffp0tGzZEvb29rCxscGFCxe0Rz4A6Yjp+vXrkZOTg7y8PKxbt077l2h2djYSExMxcuRI2NjYaKePPvpI59A0AHTo0KHMukUlj/60a9dO+9jd3R0AkJaWpp3n7e0NZ2dng69/9tln4e3tjaZNm+Lll19GVFRUmZ+J+hQWFuLDDz9E27Zt4eDgABsbG+zatUtn/5Wstajeh2s1xNzcHP/+97+xatUqbNq0CS1atCi1rrS0NNy4cQM9e/bUu47K7Ncvv/wSQUFBcHZ2ho2NDb7++utSv0tFtW3bVucIzenTp5GQkABbW1vt+8TBwQE5OTna98qIESOQkJCAQ4cOAZA6iw4ePBiNGjUyuJ09e/agZ8+eeOyxx2Bra4uXX34Z6enplf63BPS/Zy5fvoyhQ4eiadOmsLOzg4+PDwCU+W+s7/344MEDdOnSBQMGDNCezquNqjzOh0ajwZQpU/DUU0/pnKsdNmwYvL294eHhgTNnzuCtt95CfHw8Nm/erHc9M2fOxLRp07TPMzMzGUCIDLAxNX2k19uaVd/QPj169MDy5cthYWEBDw8PmJWx7unTp2P37t347LPP4OfnBysrKwwaNEjnNE2/fv2gVCqxZcsWWFhYID8/X9s3oujc+jfffIPg4GCddZuW2CdlfYEAQIsWLQAAFy9eREhISLm/p/lD46QUfZA/fCi8vO3Z2trixIkTiImJwe+//45Zs2Zhzpw5OHr0aIWvjpg/fz4WLVqEhQsXavsdTJkypdRpLvMSY7ooFIpSh+0Nee211xAcHIxz587pPf1gZWVV5usrul83bNiA6dOn4/PPP0dISAhsbW0xf/58HD58uEJ1llRy/2dlZSEoKEhvf5+iL3wXFxf069cPq1atgq+vL3777TfExMQY3MbVq1fRt29fjB07Fh9//DEcHBzw559/YuTIkcjLy4O1tfUj1QxI739vb29888038PDwgEajQZs2bcr8N9b3flQqlQgNDcX27dvx5ptv4rHHHjNYh5ubGwAgNTVVG2SKnrdv375Sv1NlVfmTaPz48Th37hz+/PNPnfmjR4/WPm7bti3c3d3Rs2dPJCYmolmzZqXWo1Qq9Z6LIqLSHM3N0czSEldyckpdXlsWBYCmlpZwqMbw0ahRI+35/vIcOHAAI0aMwAsvvABA+oIo6gBYxMzMDBEREVi1ahUsLCzw0ksvab/wXF1d4eHhgStXrmD48OGPVHevXr3g5OSEefPmYcuWLaWWZ2RkVPslk2ZmZggNDUVoaChmz54Ne3t77N27FwMGDICFhQUKyzmideDAAYSHh+Pf//43AOnL5tKlS2jVqlW11di6dWu0bt0aZ86cwbBhw0ott7W1hY+PD6Kjo9GjR49Syyu6Xw8cOIDOnTtj3Lhx2mUlj149iieeeAIbN26Ei4sL7OzsDLZ7/fXXMXToUHh6eqJZs2Z46qmnDLY9fvw4NBoNPv/8c5iYSCcMivqoFKnIv6Mh6enpiI+PxzfffKPt9Fryu7WiTExM8P3332PYsGHo0aMHYmJi4OHhobetr68v3NzcEB0drQ0bmZmZOHz4MMaOHVul7Ve4zqq8aMKECdi+fTv27dsHT0/PMtsW/ZWSkJBQlU1VGyEEbufl4eqDB7idl1ejHe+IaopCocDEcv7PGTLJ09Noh2CbN2+u7Vx3+vRpDBs2TO9f5K+//jr27t2LnTt3lvrre+7cuYiMjMTixYtx6dIlnD17FqtWrcKCBQsqVUujRo2wcuVK7NixA//617+wZ88eXL16FceOHcOMGTOq/eq87du3Y/HixTh16hT+/vtvrF27FhqNRntlho+PDw4fPoyrV6/i9u3bevdL8+bNsXv3bhw8eBAXLlzAf/7zH6RW89VLALB3716kpKQYDF9z5szB559/jsWLF+Py5cs4ceIElixZAqDi+7V58+Y4duwYdu3ahUuXLuH999/X6Wj8qIYPHw4nJyeEh4fjjz/+QFJSEmJiYjBp0iSdy4nDwsJgZ2eHjz76SNup2RA/Pz/k5+djyZIluHLlCr7//nusWLFCp42Pjw+ysrIQHR2N27dvV+p0TOPGjeHo6Iivv/4aCQkJ2Lt3r84ZgcoyNTVFVFQUAgMD8cwzz5S6sqeIQqHAlClT8NFHH2Hbtm04e/YsXnnlFXh4eKB///5V3n5FVCp8CCEwYcIEbNmyBXv37oWvr2+5rynqyfvwIR05ZeTnY9H162h++DCcDx6E7///bH74MBZdv17tYx8Q1bQIV1dYm5hU+D+vCQBrExO84upak2WVacGCBWjcuDE6d+6Mfv36ISwsDE888USpds2bN0fnzp0REBBQ6vTK66+/jpUrV2LVqlVo27YtunXrhtWrV1foc6ik8PBwHDx4EObm5hg2bBgCAgIwdOhQqNVqfPTRR1X+PfWxt7fH5s2b8cwzz6Bly5ZYsWIF1q9fj9atWwOQTkmZmpqiVatWcHZ21tv34b333sMTTzyBsLAwdO/eHW5ubjXy5dCoUaMyj/pERERg4cKFWLZsGVq3bo2+ffvqDEhVkf36n//8BwMGDMCQIUMQHByM9PR0naMgj8ra2hr79+9HkyZNMGDAALRs2RIjR45ETk6OzpEQExMTjBgxAoWFhXjllVfKXGdgYCAWLFiATz/9FG3atEFUVBQiIyN12nTu3BljxozBkCFD4OzsXKmrPE1MTLBhwwYcP34cbdq0wdSpUx95zBwzMzPt++yZZ54x2PdnxowZmDhxIkaPHo2OHTsiKysLO3fu1F4CXFMUohKHAMaNG4d169bh559/1qZ2QLo0x8rKComJiVi3bh2ee+45ODo64syZM5g6dSo8PT0RGxtboW1kZmZCpVJBrVaXecisInbduYOB587h/v//JfHwL1r095+1iQl+atMGYSU6zRLJIScnB0lJSTrX+1dE0Qin5Q00ZgLpvf5ru3boVQfe40IING/eHOPGjXukv/yIKmLkyJG4deuWwfFpqLSyPrMq8/1dqSMfy5cvh1qtRvfu3eHu7q6dNm7cCEA657Vnzx706tULAQEBeOONNzBw4ED88ssvlfz1Hp2xh58mqklhDg7Y0a4drExMoEBxmC5SNM/KxKTOBI9bt25h6dKluHnzZrmHwYkehVqtxp9//ol169Zh4sSJxi6nQapU77PyDpJ4eXlV+AhHTars8NMmkIafvh4SwjuAUp0R5uCA6yEhWJuaisUl7mrb1NISkzw9EeHmBlU1djKtSS4uLnBycsLXX3+Nxo0bG7scqsfCw8Nx5MgRjBkzBs8++6yxy2mQ6sanUiUVDT9d0fNJDw8/PamKnfmIjMHe3ByTPD0x8bHHcKegAPcKCmBrZgYHM7Nae32/IewETnIp67Jakke9u7GcKGf4aZMyLoWq6eGniWqKQqGAo7k5fKys4GhuXueCBxE1LPUufKTn5yNRzxgIThkZiPrwQyxZvFjv6wSAxJwc3KlDtwSn+oOhl4jqgur6rKp34cPQ8NOtr17FsL17MW7bNjx95ozB11fn8NNE5SkarbAqQzQTEcmtaMTVkiMLV1a96/NhaPjp2Pbt8VXfvvjP9u34dv58BK5ciRw9I6tW5/DTROUxNTWFvb299hp8a2trnjIholpJo9Hg1q1bsLa2LvN2ChVR775pyxp+esZ//oO+hw6hxfXrmLV2Ld4ZNUq7rCaGnyaqiKL7K1TkBmBERMZkYmKCJk2aPPIfSZUaZEwO1THI2KLr1zE1IUHv1S79DhzAtvfeQ4GJCTotX46T/38zJAWAhX5+vNqFjKawsBD5HHGXiGoxCwsL7f1tSqrM93e9DB8Z+fnwjIvDA41G7zgf6z/4AC/t24eTfn7otHw5NGZmsDIx4TgfREREVVRjI5zWFfbm5vipTRsooP8XnDRxItLt7PB4QgKm//ADFAA2t2nD4EFERCSDehk+gLKHn77VuDGmjh8PAJi9Zg1irKzqxPDTRERE9UG9DR9A8fDTC/380LTEDXAO9uuHq927wzIvD09Pnw7ouY01ERERVb962edDHyFE6eGnk5OB1q2B7Gxg2TJg7Nhq2x4REVFD0uD7fOijd/hpb2/gk0+kBjNmAMnJxi2SiIioAWgw4cOgceOAp54CsrKkIx+160AQERFRvcPwYWICrFwJWFgAv/4KrF9v7IqIiIjqNYYPAAgIAGbNkh5PmgTcumXceoiIiOoxho8iM2YA7doB6enA5MnGroaIiKjeYvgoYm4OfPeddBpm/Xpg+3ZjV0RERFQvMXw8LCgIeOMN6fGYMUBmpnHrISIiqocYPkqaMwfw8wP++Qd46y1jV0NERFTvMHyUZG0NfPON9HjFCiA21rj1EBER1TMMH/p07w6MHi09fv114MEDo5ZDRERUnzB8GDJvHuDhASQkAHPnGrsaIiKieoPhwxCVSjrtAgCffQYcP27ceoiIiOoJho+y9OsHDBkCFBYCI0cC+fnGroiIiKjOY/goz+LFgIMDcPo0MH++sashIiKq8xg+yuPiAixaJD2ePRuIiTFqOURERHUdw0dFDB8ODBsGFBQAAwdKnVCJiIioShg+KkKhkO5826kTcOeO1BdErTZ2VURERHUSw0dFWVkBW7cCnp7AxYtSR9SCAmNXRUREVOcwfFSGuzuwbZs0CuquXcX3gSEiIqIKY/iorMcfB77/Xnq8eDHw1VfGrYeIiKiOYfioigEDgI8/lh5PmADs3WvceoiIiOoQho+qmjlTugqmoAAYNAi4fNnYFREREdUJDB9VVXQFzJNPAnfvAn37Sj+JiIioTAwfj8LSEtiyBfDyAi5dAgYP5hUwRERE5WD4eFRubsAvvwCNGgF79gBTpxq7IiIiolqN4aM6BAYC//ufdCpm6VJg2TJjV0RERFRrMXxUl/79gf/+V3o8aZJ0FISIiIhKYfioTm+9Bbz8MlBYCLz4otQPhIiIiHQwfFQnhQL45hugc2cgI4NXwBAREenB8FHdlErpCpgmTaSxP158EcjPN3ZVREREtQbDR01wcSm+AiY6Gpg82dgVERER1RoMHzWlXTtg3TrpVMzy5dJVMERERMTwUaP+9S/gk0+kx5Mm8SZ0REREYPioeW++KQUPIYAxY4AvvjB2RUREREbF8FHTFApg4ULg7bel59OmAR9+KIURIiKiBojhQw4KhTQA2YcfSs9nzZLuissAQkREDRDDh1wUCuC994AFC6Tnn34qnY7RaIxbFxERkcwYPuQ2darU8bToPjCjRkkjohIRETUQlQofkZGR6NixI2xtbeHi4oL+/fsjPj5ep01OTg7Gjx8PR0dH2NjYYODAgUhNTa3Wouu80aOBtWsBExPgu++Af/+bA5EREVGDUanwERsbi/Hjx+PQoUPYvXs38vPz0atXL2RnZ2vbTJ06Fb/88gs2bdqE2NhY3LhxAwMGDKj2wuu8f/8b+OEHwNwc2LABGDQIyMkxdlVEREQ1TiFE1Xs93rp1Cy4uLoiNjUXXrl2hVqvh7OyMdevWYdCgQQCAixcvomXLloiLi8OTTz5Z7jozMzOhUqmgVqthZ2dX1dLqjl9/BQYOlILHs88CW7cC1tbGroqIiKhSKvP9/Uh9PtRqNQDAwcEBAHD8+HHk5+cjNDRU2yYgIABNmjRBXFyc3nXk5uYiMzNTZ2pQnnsO2LFDGop9926gd2+goe0DIiJqUKocPjQaDaZMmYKnnnoKbdq0AQDcvHkTFhYWsLe312nr6uqKmzdv6l1PZGQkVCqVdvLy8qpqSXXXM88Av/8OqFTAH38AoaHAnTvGroqIiKhGVDl8jB8/HufOncOGDRseqYCZM2dCrVZrp2vXrj3S+uqszp2BvXsBR0fg6FGgRw8gLc3YVREREVW7KoWPCRMmYPv27di3bx88PT21893c3JCXl4eMjAyd9qmpqXBzc9O7LqVSCTs7O52pwXriCSA2FnBzA86cAbp2Bf75x9hVERERVatKhQ8hBCZMmIAtW7Zg79698PX11VkeFBQEc3NzREdHa+fFx8cjOTkZISEh1VNxfde6tXTqpUkTID4e6NIFSEoydlVERETVxqwyjcePH49169bh559/hq2trbYfh0qlgpWVFVQqFUaOHIlp06bBwcEBdnZ2mDhxIkJCQip0pQv9Pz8/YP9+oGdPIDEReOopYNMm6ScREVEdV6lLbRUKhd75q1atwogRIwBIg4y98cYbWL9+PXJzcxEWFoZly5YZPO1SUoO71LYsKSlAr17AuXOAmZk0NPuECdLoqERERLVIZb6/H2mcj5rA8FFCVhbw+uvAxo3S86FDgW++kS7NJSIiqiVkG+eDZGBjA6xfDyxcKB39WL8eePJJ4NIlY1dGRERUJQwfdYFCAUyeLF2K6+YmnYbp2FEaDZWIiKiOYfioS7p0AU6cAJ5+WhoF9YUXgJkzgYICY1dGRERUYQwfdY27u3QEZOpU6fknn0hDst+6Zdy6iIiIKojhoy4yN5eufNmwQep4Gh0tDVB25IixKyMiIioXw0ddNmQIcPgw0KIFcP26dFpmxQqgdl3AREREpIPho65r3Vq6F8wLLwB5ecDYscCrrwIPHhi7MiIiIr0YPuoDOzvgp5+AefMAExNgzRrpRnVXrhi7MiIiolIYPuoLhQJ4801g927A2Rk4dQoICgK2bzd2ZURERDoYPuqbZ56RLscNDgYyMoB+/YDXXgPu3jV2ZURERAAYPuonT08gNlYamEyhAFatAlq1AjZvNnZlREREDB/1llIpDcn+xx+Avz9w8yYwcCAwaJD0mIiIyEgYPuq7p56S+n+88w5gaip1TG3VSuqUyktyiYjICBg+GgJLS+Djj4Fjx4DHH5f6f4wYAfTpA/z9t7GrIyKiBobhoyFp314aBfWTT6TTMrt2SeOELF0KaDTGro6IiBoIho+GxswMeOst4PRp6QZ12dnAxIlA165AfLyxqyMiogaA4aOh8veXroj58kvAxgY4cAAIDAQiI4H8fGNXR0RE9RjDR0NmYgKMGwecOyfdGTc3V+qY2qkTcPKksasjIqJ6iuGDAG9v4NdfgbVrAQcH6eqYjh2l0zOZmcaujoiI6hmGD5IoFMDLLwPnzwODBwOFhdK9Yvz8pFMzPBVDRETVhOGDdLm6Ahs3Atu2AS1aALduARMmSFfFbN7MsUGIiOiRMXyQfv36SX1Bli0DXFyAy5elEVKffho4eNDY1RERUR3G8EGGmZsDY8cCCQnA++8D1tZS8HjqKSmIXLpk7AqJiKgOYvig8tnaAh98IB39eP116SqZzZulUzETJgBpacaukIiI6hCGD6o4Dw/gm2+AM2eAvn2BggKpM6qfnzR8+/37xq6QiIjqAIYPqrzWrYFffgH27gWCgoB794D33gOaNwe++066UoaIiMgAhg+quh49pHvFrFsH+PgAN24AI0dK95DZsYNXxhARkV4MH/RoTEyAoUOBixeBzz8HGjeWrpLp21e6g+6GDdLpGSIiov/H8EHVQ6kEpk0DEhOBGTOARo2km9cNHQoEBABffQXk5Bi7SiIiqgUYPqh6NW4MfPopkJwsXSHj6CgFkjFjpFMzn37KIduJiBo4hg+qGQ4O0tggf/8NLFoEeHkBqanA228DTZpIN7BLTTV2lUREZAQMH1SzGjUCJk2Sjn6sXg20bAmo1UBkpHRDu3HjgKQkY1dJREQyYvggeZibAxERUmfUrVuB4GAgNxdYvly6RHf4cGn8ECIiqvcYPkheJiZAeDgQFwfs2weEhUnjgqxbBwQGAs8/D+zfz8t0iYjqMYYPMg6FAujeHdi5EzhxAhg8WAomv/4KdOsGtG0LLF0qnaIhIqJ6heGDjO/xx4GNG6WxQkaPBqysgL/+AiZOlIZ0HzUKOH7c2FUSEVE1Yfig2qN5c2k8kBs3gCVLgFatpPvFrFwJdOgAdOwIfPstkJ1t7EqJiOgRMHxQ7WNvL90t99w5qf/HsGGAhQVw7Jh0V10PD+moyLlzxq6UiIiqgOGDai+FAujSBYiKAq5fB+bNA5o1kwYpW7pU6hdStDw319jVEhFRBTF8UN3g7Ay8+SZw6RLw++/AgAGAqSnw55/Av/8NeHpKw7pfvmzsSomIqBwKIWrXNY2ZmZlQqVRQq9Wws7MzdjlUm/3zj9QH5JtvpCMjRZ58Uho3ZPBgwMXFePURETUglfn+Zviguq+gQLpEd8UKYNcuQKOR5puaAr16SUGkf39ptFUiIqoRDB/UcKWkSJftRkVJHVSLWFtLAWT4cODZZ6URV4mIqNowfBABQHy8NHJqVJR0b5kizs7SKZnhw6VTNAqF8WokIqonGD6IHiYEcOSIFEI2bABu3Spe1rSpdCnv8OFAQIDxaiQiquMYPogMyc8H9uyRgsjWrboDlj3+uHQVTf/+QOvWPCJCRFQJDB9EFZGdDfz8sxREdu2SbnBXpFkz4IUXpCDy5JNS51UiIjKI4YOosm7dArZtk46G7N6tO2iZi4t0J97+/YFnngEsLY1VJRFRrcXwQfQo7t2TjoRs3Qps3657Z10bG6BPHymIPP88oFIZq0oiolqF4YOouuTlAbGxUhDZulW66V0Rc3OgRw8piPzrX8BjjxmpSCIi42P4IKoJGo00dkhRELlwQXd527ZA795AWBjw9NOAUmmMKomIjKIy39+VvrfL/v370a9fP3h4eEChUGDr1q06y0eMGAGFQqEz9e7du7KbIap9TEyATp2A//4XOH8euHgR+PTT4rFCzp4F5s8HQkMBBwfptMySJdL9aGpXxiciMqpKh4/s7GwEBgbiyy+/NNimd+/eSElJ0U7r169/pCKJaiV/f+lmdnFxQFqaNKBZRATg5gbcvy8N+T5pktSuaVNg7FjpiElmprErJyIyKrPKvqBPnz7o06dPmW2USiXc3NwqtL7c3FzkPnRlQSY/mKkucnIChg6VJiGAM2ekTqu7dgF//AFcvSrde2bFCsDMDOjcWTo907s30L69dFSFiKiBqJFPvJiYGLi4uMDf3x9jx45Fenq6wbaRkZFQqVTaycvLqyZKIpKPQgEEBkpHRaKjgTt3gF9+ASZMAJo3l26Et38/8O67QFAQ4OoKvPgisHQpcO5c8Y3xiIjqqUfqcKpQKLBlyxb0799fO2/Dhg2wtraGr68vEhMT8c4778DGxgZxcXEw1TNQk74jH15eXuxwSvXXlSvFR0Wio4GsLN3lTk5At27S1L27NNoqj4wQUS0n29Uu+sJHSVeuXEGzZs2wZ88e9OzZs9x18moXalDy8qQraGJipOnAAam/yMMcHYGuXaUg0r070KYNwwgR1TqV+f6udJ+PymratCmcnJyQkJBQofBB1KBYWEj9Pzp3Bt55Rwojx4/rhpH0dGDLFmkCpCtpisJIt27SJb4c/p2I6pAaDx/Xr19Heno63N3da3pTRHWfhQUQEiJNM2dKN8J7OIz8+afUh6RorBFAGnW1UycpwISESJf+OjgY73cgIipHpU+7ZGVlISEhAQDw+OOPY8GCBejRowccHBzg4OCAuXPnYuDAgXBzc0NiYiJmzJiBe/fu4ezZs1BWYNAlnnYhKkN+PnDihO6RkXv3SrcLCCgOMZ07Ay1b8lQNEdWoGu3zERMTgx49epSaHxERgeXLl6N///44efIkMjIy4OHhgV69euHDDz+Eq6trtRdP1OAVFkoDnsXFAQcPSj8vXSrdTqWSjogUBZLgYN6XhoiqFYdXJ2rIbt8GDh0qDiRHjpTuxKpQAK1aAR07Ah06SFO7doCVlXFqJqI6j+GDiIoVFEiDnsXFFQeSpKTS7czMpMt6i8JIhw5SZ1beo4aIKoDhg4jKdvMmcPiw1Jn12DFpunWrdDtzc+mISFBQcSBp00aaT0T0EIYPIqocIYDr14uDSNF0507ptkqlFEjat5dGcg0MlJ7z/ytRg8bwQUSPTgjg779LBxK1Wn97X18piDwcSnx8pP4lRFTvMXwQUc0QQhoe/vhx4PTp4un6df3t7eykoyJFYaR9e+m0DTu2EtU7DB9EJK/0dKlT66lTxYHk/HlpxNaSTEyApk2lzq0PT/7+gKWl7KUTUfVg+CAi48vPBy5e1D1CcuqU/o6tgBRK/Pz0hxILC1lLJ6LKY/ggotpJCCAtDfjrr9LT3bv6X2NqCjRvXhxGAgKkQNKihTS0PBHVCgwfRFS3CCFd/lsykJw7B2RmGn6dp6cURIoCSdFjT08OJ08kM4YPIqofhAD++UfqP1IUSOLjpcnQ6RtA6tBaFEYeDid+frwkmKiGMHwQUf13505xELl4sfhnQoI0qqshLi5SCPHzk07nPPyY97shqjKGDyJquPLzpeHjSwaT8o6WAICTk/5g4ucHODjIUz9RHcXwQUSkj1oNJCZKR0cuX5Z+Fk03b5b9WpVKGkitadPSP729eZkwNXgMH0RElXXvXnEwKZqKAsqNG+W/3sNDfzDx9QXc3aWrdojqMYYPIqLqdP8+cPWqdDrnypXSP7Oyyn69mRng5SUdIdE3eXnx7sFU51Xm+9tMppqIiOoua2ugVStpKkkIaYTXojBSMpgkJ0sdYIuWGeLuLgWRJk1KBxMvL6BxY94nh+oNHvkgIqpJhYXSaZu//zY8PXhQ/nqsrYuDiKdn8eOHn/NqHTIinnYhIqorhABu3zYcTK5fl5ZXhK2tbhh57LHiycND+unkxAHYqEYwfBAR1ScPHkgh5Pp14No1aXr48bVrhoenL8ncXAoiRWGkZDgpmqyta/Z3onqHfT6IiOoTKytp3JHmzQ23yc4uHU7++UeabtyQfqalSeOgFB1VKYudndQPpbxJpWJfFKo0hg8iovqgUaPi4eQNyc8HUlKKw8jDweThKTtbuqdOZqY0OFtZLC2lEOLmVhxI3NykydVVmooe84oe+n8MH0REDYW5uXQ1TZMmZbfLzJRCSnlTRgaQk1P+lTxFVCr9oeThea6ugLOzdLSH6i2GDyIi0mVnJ01lHUUBpL4oN2+WDiWpqdL81NTix/n50gizanX5R1MAwMZGug9PycnZufQ8JydpLBWqM/ivRUREVWNlJY3g6utbdjshpKMkD4eSkuGk6HFaGpCXJw3clpUljZVSEQ4OUjBxdpbCiL6fDz9mh1qjYvggIqKapVBIg6Q1bgwEBJTdVgjptE9amjTdulX8WN+Ung5oNNJdjovudFwRVla6YcTRUXr88M+SjxlYqg3DBxER1R4KhdQ3RKUq++qeIoWFUuhITZXGQ7l1q/yfeXnSKaPkZGmqKCsr/eHEwUF67OBQPBU9b9yYp4T04B4hIqK6y9S0+JRKRQgh3USwZCBJT5cep6frf1xQoDveSmXY2ZUOJ0UBpeiIUOPGxWGlaLK2rreXMTN8EBFRw6FQFHeobdq0Yq8pCiwPh5KHw8mdO8U/i6b0dKlzLVB82XJFrgh6mIVF2eGkcWPA3r74Z9HUuLHUYbcWj2TL8EFERFSWhwNLeZ1rH1ZQIHW0fTiQlAwod+9K0507xY/v3pVem5dX3BG3skxMpFNXhsKJlxcweXLl11tNOLw6ERFRbSKEdKXPw2GkZEC5c0cKNg9PRcvy8srfhr8/cPFitZbN4dWJiIjqKoVCukmgrW35A8Lpk5NTHEb0BZSMDOkIiBExfBAREdUnlpbFQ9zXUrW3NwoRERHVSwwfREREJCuGDyIiIpIVwwcRERHJiuGDiIiIZMXwQURERLJi+CAiIiJZMXwQERGRrBg+iIiISFYMH0RERCQrhg8iIiKSVa29t0t2XjZM80xLzTc1MYWlmaVOO0NMFCawMreqUtv7+fdh6Ia/CoUC1ubWVWr7IP8BNEJjsI5GFo2q1DanIAeFmsJqaWttbg2FQgEAyC3IRYGmoFraWplbwUQh5d28wjzkF+ZXS1tLM0uYmphWum1+YT7yCg3f/VFppoSZiVml2xZoCpBbkGuwrYWpBcxNzSvdtlBTiJyCHINtzU3NYWFqUem2GqHBg/wH1dLWzMQMSjMlAEAIgfv596ulbWX+3/MzQn9bfkbwM0KOz4iKqrXhw+NzD8Cy9Pznmj+HHcN2aJ+7fOZi8EOrm3c3xIyI0T73WeSD2/dv623bwaMDjo46qn3e6stW+Fv9t962rZxb4a9xf2mfd/ymI87fOq+3rbfKG1enXNU+77q6K47dOKa3rZO1E269eUv7vE9UH8T+Hau3rbW5NbLfKf6gHPjDQPx6+Ve9bQFAzC7+4Ht5y8v48fyPBttmzczSfhD9Z/t/sOb0GoNt06anwbmRMwBg2q5pWHZsmcG2SZOT4GPvAwB4N/pdfBb3mcG258aeQ2uX1gCA//7xX8yNnWuw7ZHXj6DjYx0BAIsOLcKMPTMMtt0XsQ/dfboDAL4+/jUm/DbBYNvtQ7fj+RbPAwCizkbh1Z9fNdj2h0E/4MXWLwIAtlzYgsE/DjbYdlX4KoxoPwIAsCthF/qu72uw7dI+SzG+03gAwB/Jf6DHmh4G284LnYc3n3oTAHAi5QQ6rexksO3sbrMxp/scAMCFWxfQZnkbg22nh0zH/F7zAQDJ6mT4LvI12HZch3H48vkvAQC379+Gy2cuBttGBEZgdf/VAKQvZ5tIG4NtB7UahE0vbtI+L6stPyMk/Iwoxs8IiRyfERXF0y5EREQkK4UwdCzQSDIzM6FSqXDj1g3Y2dmVWs5Dqvrb8pAqD6nytEvl2/Izompt+Rkh4WeEbtui72+1Wq33+/thtTZ8VKR4IiIiqh0q8/3N0y5EREQkK4YPIiIiklWlw8f+/fvRr18/eHh4QKFQYOvWrTrLhRCYNWsW3N3dYWVlhdDQUFy+fLm66iUiIqI6rtLhIzs7G4GBgfjyyy/1Lp83bx4WL16MFStW4PDhw2jUqBHCwsKQk2O4YwsRERE1HJUe56NPnz7o06eP3mVCCCxcuBDvvfcewsPDAQBr166Fq6srtm7dipdeeunRqiUiIqI6r1r7fCQlJeHmzZsIDQ3VzlOpVAgODkZcXJze1+Tm5iIzM1NnIiIiovqrWsPHzZs3AQCurq46811dXbXLSoqMjIRKpdJOXl5e1VkSERER1TJGv9pl5syZUKvV2unatWvGLomIiIhqULWGDzc3NwBAamqqzvzU1FTtspKUSiXs7Ox0JiIiIqq/qjV8+Pr6ws3NDdHR0dp5mZmZOHz4MEJCQqpzU0RERFRHVfpql6ysLCQkJGifJyUl4dSpU3BwcECTJk0wZcoUfPTRR2jevDl8fX3x/vvvw8PDA/3796/OuomIiKiOqnT4OHbsGHr0KL5l77Rp0wAAERERWL16NWbMmIHs7GyMHj0aGRkZePrpp7Fz505YWloaWiURERE1ILyxHBERET0y3liOiIiIai2GDyIiIpIVwwcRERHJiuGDiIiIZMXwQURERLJi+CAiIiJZMXwQERGRrBg+iIiISFYMH0RERCQrhg8iIiKSFcMHERERyYrhg4iIiGTF8EFERESyYvggIiIiWTF8EBERkawYPoiIiEhWDB9EREQkK4YPIiIikhXDBxEREcmK4YOIiIhkxfBBREREsmL4ICIiIlkxfBAREZGsGD6IiIhIVgwfREREJCuGDyIiIpIVwwcRERHJiuGDiIiIZMXwQURERLJi+CAiIiJZMXwQERGRrBg+iIiISFYMH0RERCQrhg8iIiKSFcMHERERyYrhg4iIiGTF8EFERESyYvggIiIiWTF8EBERkawYPoiIiEhWDB9EREQkK4YPIiIikhXDBxEREcmK4YOIiIhkxfBBREREsmL4ICIiIlkxfBAREZGsGD6IiIhIVgwfREREJCuGDyIiIpIVwwcRERHJqtrDx5w5c6BQKHSmgICA6t4MERER1VFmNbHS1q1bY8+ePcUbMauRzRAREVEdVCOpwMzMDG5ubjWxaiIiIqrjaqTPx+XLl+Hh4YGmTZti+PDhSE5ONtg2NzcXmZmZOhMRERHVX9UePoKDg7F69Wrs3LkTy5cvR1JSErp06YJ79+7pbR8ZGQmVSqWdvLy8qrskIiIiqkUUQghRkxvIyMiAt7c3FixYgJEjR5Zanpubi9zcXO3zzMxMeHl5Qa1Ww87OriZLIyIiomqSmZkJlUpVoe/vGu8Jam9vjxYtWiAhIUHvcqVSCaVSWdNlEBERUS1R4+N8ZGVlITExEe7u7jW9KSIiIqoDqj18TJ8+HbGxsbh69SoOHjyIF154Aaamphg6dGh1b4qIiIjqoGo/7XL9+nUMHToU6enpcHZ2xtNPP41Dhw7B2dm5ujdFREREdVC1h48NGzZU9yqJiIioHuG9XYiIiEhWDB9EREQkK4YPIiIikhXDBxEREcmK4YOIiIhkxfBBREREsmL4ICIiIlkxfBAREZGsGD6IiIhIVgwfREREJCuGDyIiIpIVwwcRERHJiuGDiIiIZMXwQURERLJi+CAiIiJZMXwQERGRrBg+iIiISFYMH0RERCQrhg8iIiKSFcMHERERyYrhg4iIiGTF8EFERESyYvggIiIiWTF8EBERkawYPoiIiEhWDB9EREQkK4YPIiIikhXDBxEREcmK4YOIiIhkxfBBREREsmL4ICIiIlkxfBAREZGsGD6IiIhIVgwfREREJCuGDyIiIpIVwwcRERHJiuGDiIiIZMXwQURERLJi+CAiIiJZMXwQERGRrBg+iIiISFYMH0RERCQrhg8iIiKSFcMHERERyYrhg4iIiGTF8EFERESyYvggIiIiWTF8EBERkawYPoiIiEhWDB9EREQkK4YPIiIiklWNhY8vv/wSPj4+sLS0RHBwMI4cOVJTmyIiIqI6pEbCx8aNGzFt2jTMnj0bJ06cQGBgIMLCwpCWllYTmyMiIqI6RCGEENW90uDgYHTs2BFLly4FAGg0Gnh5eWHixIl4++23ddrm5uYiNzdX+1ytVqNJkya4du0a7Ozsqrs0IiIiqgGZmZnw8vJCRkYGVCpVmW3NqnvjeXl5OH78OGbOnKmdZ2JigtDQUMTFxZVqHxkZiblz55aa7+XlVd2lERERUQ27d++e/OHj9u3bKCwshKurq858V1dXXLx4sVT7mTNnYtq0adrnGo0Gd+7cgaOjIxQKRbXWVpTKeFSlfNxXFcd9VXHcVxXHfVU53F8VV1P7SgiBe/fuwcPDo9y21R4+KkupVEKpVOrMs7e3r9Ft2tnZ8c1ZQdxXFcd9VXHcVxXHfVU53F8VVxP7qrwjHkWqvcOpk5MTTE1NkZqaqjM/NTUVbm5u1b05IiIiqmOqPXxYWFggKCgI0dHR2nkajQbR0dEICQmp7s0RERFRHVMjp12mTZuGiIgIdOjQAZ06dcLChQuRnZ2NV199tSY2V2FKpRKzZ88udZqHSuO+qjjuq4rjvqo47qvK4f6quNqwr2rkUlsAWLp0KebPn4+bN2+iffv2WLx4MYKDg2tiU0RERFSH1Fj4ICIiItKH93YhIiIiWTF8EBERkawYPoiIiEhWDB9EREQkqwYTPr788kv4+PjA0tISwcHBOHLkiLFLqpXmzJkDhUKhMwUEBBi7rFph//796NevHzw8PKBQKLB161ad5UIIzJo1C+7u7rCyskJoaCguX75snGKNrLx9NWLEiFLvs969exunWCOLjIxEx44dYWtrCxcXF/Tv3x/x8fE6bXJycjB+/Hg4OjrCxsYGAwcOLDWQY0NQkX3VvXv3Uu+tMWPGGKli41m+fDnatWunHcU0JCQEv/32m3a5sd9TDSJ8bNy4EdOmTcPs2bNx4sQJBAYGIiwsDGlpacYurVZq3bo1UlJStNOff/5p7JJqhezsbAQGBuLLL7/Uu3zevHlYvHgxVqxYgcOHD6NRo0YICwtDTk6OzJUaX3n7CgB69+6t8z5bv369jBXWHrGxsRg/fjwOHTqE3bt3Iz8/H7169UJ2dra2zdSpU/HLL79g06ZNiI2NxY0bNzBgwAAjVm0cFdlXADBq1Cid99a8efOMVLHxeHp64pNPPsHx48dx7NgxPPPMMwgPD8dff/0FoBa8p0QD0KlTJzF+/Hjt88LCQuHh4SEiIyONWFXtNHv2bBEYGGjsMmo9AGLLli3a5xqNRri5uYn58+dr52VkZAilUinWr19vhAprj5L7SgghIiIiRHh4uFHqqe3S0tIEABEbGyuEkN5H5ubmYtOmTdo2Fy5cEABEXFycscqsFUruKyGE6Natm5g8ebLxiqrFGjduLFauXFkr3lP1/shHXl4ejh8/jtDQUO08ExMThIaGIi4uzoiV1V6XL1+Gh4cHmjZtiuHDhyM5OdnYJdV6SUlJuHnzps77TKVSITg4mO8zA2JiYuDi4gJ/f3+MHTsW6enpxi6pVlCr1QAABwcHAMDx48eRn5+v894KCAhAkyZNGvx7q+S+KhIVFQUnJye0adMGM2fOxP37941RXq1RWFiIDRs2IDs7GyEhIbXiPWX0u9rWtNu3b6OwsBCurq46811dXXHx4kUjVVV7BQcHY/Xq1fD390dKSgrmzp2LLl264Ny5c7C1tTV2ebXWzZs3AUDv+6xoGRXr3bs3BgwYAF9fXyQmJuKdd95Bnz59EBcXB1NTU2OXZzQajQZTpkzBU089hTZt2gCQ3lsWFhal7vbd0N9b+vYVAAwbNgze3t7w8PDAmTNn8NZbbyE+Ph6bN282YrXGcfbsWYSEhCAnJwc2NjbYsmULWrVqhVOnThn9PVXvwwdVTp8+fbSP27Vrh+DgYHh7e+OHH37AyJEjjVgZ1ScvvfSS9nHbtm3Rrl07NGvWDDExMejZs6cRKzOu8ePH49y5c+xnVQGG9tXo0aO1j9u2bQt3d3f07NkTiYmJaNasmdxlGpW/vz9OnToFtVqNH3/8EREREYiNjTV2WQAaQIdTJycnmJqalurFm5qaCjc3NyNVVXfY29ujRYsWSEhIMHYptVrRe4nvs6pp2rQpnJycGvT7bMKECdi+fTv27dsHT09P7Xw3Nzfk5eUhIyNDp31Dfm8Z2lf6FN1TrCG+tywsLODn54egoCBERkYiMDAQixYtqhXvqXofPiwsLBAUFITo6GjtPI1Gg+joaISEhBixsrohKysLiYmJcHd3N3YptZqvry/c3Nx03meZmZk4fPgw32cVcP36daSnpzfI95kQAhMmTMCWLVuwd+9e+Pr66iwPCgqCubm5znsrPj4eycnJDe69Vd6+0ufUqVMA0CDfWyVpNBrk5ubWjveULN1ajWzDhg1CqVSK1atXi/Pnz4vRo0cLe3t7cfPmTWOXVuu88cYbIiYmRiQlJYkDBw6I0NBQ4eTkJNLS0oxdmtHdu3dPnDx5Upw8eVIAEAsWLBAnT54Uf//9txBCiE8++UTY29uLn3/+WZw5c0aEh4cLX19f8eDBAyNXLr+y9tW9e/fE9OnTRVxcnEhKShJ79uwRTzzxhGjevLnIyckxdumyGzt2rFCpVCImJkakpKRop/v372vbjBkzRjRp0kTs3btXHDt2TISEhIiQkBAjVm0c5e2rhIQE8cEHH4hjx46JpKQk8fPPP4umTZuKrl27Grly+b399tsiNjZWJCUliTNnzoi3335bKBQK8fvvvwshjP+eahDhQwghlixZIpo0aSIsLCxEp06dxKFDh4xdUq00ZMgQ4e7uLiwsLMRjjz0mhgwZIhISEoxdVq2wb98+AaDUFBERIYSQLrd9//33haurq1AqlaJnz54iPj7euEUbSVn76v79+6JXr17C2dlZmJubC29vbzFq1KgG+8eAvv0EQKxatUrb5sGDB2LcuHGicePGwtraWrzwwgsiJSXFeEUbSXn7Kjk5WXTt2lU4ODgIpVIp/Pz8xJtvvinUarVxCzeC1157TXh7ewsLCwvh7OwsevbsqQ0eQhj/PaUQQgh5jrEQERERNYA+H0RERFS7MHwQERGRrBg+iIiISFYMH0RERCQrhg8iIiKSFcMHERERyYrhg4iIiGTF8EFERESyYvggIiIiWTF8EBERkawYPoiIiEhW/wciMB7tFvEQaAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Player  Christian McCaffrey  par:  17.373446993738092 \n",
            "\n",
            "y = 2865.85 / (13.3472x + 164.02) + 7.36\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Player  A.J. Brown  par:  14.236255033797285 \n",
            "\n",
            "y = 2865.85 / (13.3472x + 164.02) + 7.36\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Player  Chris Olave  par:  7.49563832338378 \n",
            "\n",
            "\n",
            "\n",
            "Clear Winner\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(\"Side 1 ['Christian McCaffrey'] score: 17.373446993738092\",\n",
              " \"Side 2 ['A.J. Brown', 'Chris Olave'] score: 21.731893357181065\")"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### SUCCESS"
      ],
      "metadata": {
        "id": "XsVvhTQyb8Gv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Notes:\n",
        "- Awesome for a football content creator who makes their own unique rankings!\n",
        "- Runs on data from up to week 11 of NFL season\n",
        "- chip rankings I used are for fun, ideally the stakeholder provides me with their own rankings\n",
        "- based on ppr scoring format, 12 teams, 1qb 2rb 2wr 1te 2flex\n",
        "- in the future, can optimize by\n",
        "  - automating a dataflow to update stats as the NFL season progresses\n",
        "  - supporting different scoring formats and league sizes\n",
        "  - more lenient with structure of input data\n",
        "  - putting online!"
      ],
      "metadata": {
        "id": "5ST6Dc4GcQCF"
      }
    }
  ]
}
